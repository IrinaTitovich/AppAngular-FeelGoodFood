{"version":3,"sources":["./src/app/components/contacts/log-in/log-in.component.ts","./src/app/components/contacts/log-in/log-in.component.html","./src/app/components/contacts/create-account/create-account.component.ts","./src/app/components/contacts/create-account/create-account.component.html","./src/app/components/contacts/contacts.component.html","./src/app/components/contacts/contacts.component.ts","./src/app/components/contacts/contacts.module.ts"],"names":[],"mappings":"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","file":"components-contacts-contacts-module.js","sourcesContent":["import { Component, ElementRef, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { LocalDataService } from 'src/app/services/local-data.service';\n\n\n@Component({\n  selector: 'app-log-in',\n  templateUrl: './log-in.component.html',\n  styleUrls: ['./log-in.component.scss']\n})\nexport class LogInComponent implements OnInit {\n\n\n  email:string = ''\n\n  @ViewChild('formEmail') formEmail:ElementRef\n  @ViewChild('formPassword') formPassword:ElementRef\n\n  message:string=''\n  \n  form:FormGroup\n  constructor(public localData:LocalDataService) { \n  }\n\n  ngOnInit(): void {\n    this.form=new FormGroup({\n      email:new FormControl('',[Validators.email,Validators.required,]),\n      \n      password:new FormControl(null,[\n    Validators.required,Validators.minLength(6)\n  ])\n    })\n  }\n\n  submit(){\n\n    if(this.form.valid){\n      let email = this.form.value.email\n      console.log(this.form.value.password)\n      let indexOfUser = this.localData.getUserIndex(email)\n\n      if (Boolean(indexOfUser+1)){\n        let password = this.form.value.password\n        let isPasswordCorrect = this.localData.isPassword(password,indexOfUser)\n        if (isPasswordCorrect){\n            console.log ('OK')\n            this.localData.users.isUserConnected=true\n            this.message=''\n            this.localData.users.connectedUser=this.localData.users.users[indexOfUser]\n            this.email=this.localData.users.connectedUser.email\n            console.log(this.localData.users)\n          }else{\n          this.message='Wrong password'\n        }\n      }else{\n        this.message='User with such email is not registed. Please, сreate account'\n      }\n      this.form.reset()\n      this.addInfoToLocalLists()\n  }\n  }\n\n  addInfoToLocalLists(){\n    if(this.localData.users.connectedUser.shoppingList){\n      this.localData.users.connectedUser.shoppingList.forEach((item)=>{\n        this.localData.shoppingList.ingredients.add(item)\n      })\n    }\n    if(!this.localData.users.connectedUser.favoriteRecipes){\n      this.localData.users.connectedUser.favoriteRecipes = new Set\n    }\n  }\n\n\n\n  clearForm(){\n    this.formEmail.nativeElement.value=''\n    this.formPassword.nativeElement.value=null\n  }\n}\n","<form class=\"form\" action=\"\" [formGroup]='form' (ngSubmit)='submit()' *ngIf='!this.localData.users.isUserConnected;else connected'>\n    <h3 class=\"form__title\">Log In</h3>\n    <div class=\"form__block\">\n        <label class=\"form__label\" for='email'>Email</label>\n        <div class=\"form__validation\">\n            <input class=\"form__input input\" type=\"text\" placeholder=\"Email\" formControlName='email' #formEmail>\n            <div class=\"form__message\">\n                <small class=\"\" *ngIf=\"form.get('email').invalid&&form.get('email').touched&&!form.get('email').value\">This field can`t be empty</small>\n                <small class=\"\" *ngIf=\"form.get('email').invalid&&form.get('email').touched&&form.get('email').value\">Enter correct email</small>\n            </div>\n        </div>\n\n    </div>\n\n    <div class=\"form__block\">\n        <label class=\"form__label\" for='password'>password</label>\n        <div class=\"form__validation\">\n            <input #formPassword class=\"form__input input\" type=\"password\" placeholder=\"Password\" formControlName='password'>\n            <div class=\"form__message\">\n                <small class=\"\" *ngIf=\"form.get('password').invalid&&form.get('password').touched&&!form.get('password').value\">This field can`t be empty</small>\n                <small class=\"\" *ngIf=\"form.get('password').invalid&&form.get('password').touched&&form.get('password').value\">Password is only characters {{form.get('password').errors.minlength.actualLength}} long. The password must contain at least six characters </small>\n            </div>\n        </div>\n    </div>\n    <p class=\"form__message\">{{message}}</p>\n    <button (click)='clearForm()' class=\"form__btn btn\" [disabled]=\"form.invalid\" type=\"submit\">OK</button>\n</form>\n<ng-template class=\"contacts__information container\" #connected>\n    <h3 class=\"contacts__message\">Your email {{localData.users.connectedUser.email}} is connected </h3>\n    <button (click)='localData.logOff()' class=\"toggle contacts__log-off\" type=\"submit\">Log off</button>\n\n</ng-template>","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GetDataService } from 'src/app/services/get-data.service';\nimport { LocalDataService } from 'src/app/services/local-data.service';\n\n@Component({\n  selector: 'app-create-account',\n  templateUrl: './create-account.component.html',\n  styleUrls: ['./create-account.component.scss']\n})\n\n\nexport class CreateAccountComponent implements OnInit {\n  error=''\n  message:string= ''\n  @ViewChild('formCrAccEmail') formCrAccEmail:ElementRef\n  @ViewChild('formCrAccPassword') formCrAccPassword:ElementRef\n  formCreateAccount:FormGroup\n  constructor(public localData:LocalDataService,public getData:GetDataService) { }\n\n  ngOnInit(): void {\n    this.formCreateAccount=new FormGroup({\n      email:new FormControl('',[Validators.email,Validators.required]),\n      password:new FormControl(null,[Validators.required, Validators.minLength(6)])\n    })\n  }\n\n  submitNewUser(){\n    this.localData.logOff()\n    if(this.formCreateAccount.valid){\n      const formData = {\n        ...this.formCreateAccount.value\n      }\n      this.localData.users.email = this.formCreateAccount.value.email\n      this.localData.users.password = this.formCreateAccount.value.password\n      \n      let req = {\n        email:this.formCreateAccount.value.email\n      }\n\n      this.getData.connectUser(this.localData.users.urlConnectUser,req).subscribe(user=>{\n        this.localData.users.username=user.username\n        this.localData.users.hash=user.hash\n        this.localData.updateUsers()\n      },error=>{\n        console.log(error)\n        this.error=error.message;\n      })\n    }\n    this.formCreateAccount.reset()\n    this.message = `User ${this.localData.users.email} is created. Please, log in`\n  }\n\n\n  clearFormCrAcc(){\n    this.formCrAccEmail.nativeElement.value=''\n    this.formCrAccPassword.nativeElement.value=null\n  }\n\n\n}\n","<form class=\"form formCrAcc\" action=\"\" [formGroup]='formCreateAccount' (ngSubmit)='submitNewUser()'>\n    <h3 class=\"form__title\">Create New Account</h3>\n    <div class=\"form__block\">\n        <label class=\"form__label\">Email</label>\n        <div class=\"form__validation\">\n            <input #formCrAccEmail class=\"form__input input\" type=\"text\" placeholder=\"Email\" formControlName='email'>\n            <div class=\"form__message\">\n                <small class=\"\" *ngIf=\"formCreateAccount.get('email').invalid&&formCreateAccount.get('email').touched&&!formCreateAccount.get('email').value\">This field can`t be empty</small>\n                <small class=\"\" *ngIf=\"formCreateAccount.get('email').invalid&&formCreateAccount.get('email').touched&&formCreateAccount.get('email').value\">Enter correct email</small>\n            </div>\n        </div>\n\n    </div>\n\n    <div class=\"form__block\">\n        <label class=\"form__label\" for='password'>password</label>\n        <div class=\"form__validation\">\n            <input #formCrAccPassword class=\"form__input input\" type=\"password\" placeholder=\"Password\" formControlName='password'>\n            <div class=\"form__message\">\n                <small class=\"\" *ngIf=\"formCreateAccount.get('password').invalid&&formCreateAccount.get('password').touched&&!formCreateAccount.get('password').value\">This field can`t be empty</small>\n                <small class=\"\" *ngIf=\"formCreateAccount.get('password').invalid&&formCreateAccount.get('password').touched&&formCreateAccount.get('password').value\">Password is only characters {{formCreateAccount.get('password').errors.minlength.actualLength}} long. The password must contain at least six characters </small>\n            </div>\n        </div>\n    </div>\n    <button class=\"form__btn btn\" [disabled]=\"formCreateAccount.invalid\" type=\"submit\">OK</button>\n    <p class=\"form__message\" *ngIf='!error'>{{message}}</p>\n    <div *ngIf='error' class=\"error\">{{error}}</div>\n</form>","<div class=\"contacts container\">\n    <button class=\"toggle\" (click)='toggle()'>{{btn}}</button>\n    <app-log-in *ngIf='logIn'></app-log-in>\n    <app-create-account *ngIf='!logIn'></app-create-account>\n</div>","import { Component,  OnInit, ViewEncapsulation } from '@angular/core';\nimport { GetDataService } from '../../services/get-data.service';\nimport { LocalDataService } from '../../services/local-data.service';\n\n@Component({\n  selector: 'app-contacts',\n  templateUrl: './contacts.component.html',\n  styleUrls: ['./contacts.component.scss'],\n  encapsulation:ViewEncapsulation.None\n})\nexport class ContactsComponent implements OnInit {\n  \n  \n\n  logIn:Boolean =true\n  btn:string ='Create Account'\n\n  constructor(public localData:LocalDataService,public getData:GetDataService) { \n\n  }\n  toggle(){\n  if (!this.logIn){\n    this.logIn=!this.logIn\n    this.btn = 'Create Account'\n  } else{\n    this.logIn=!this.logIn\n    this.btn = 'Log In'\n  }\n  }\n  ngOnInit(): void {\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContactsComponent } from './contacts.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { CreateAccountComponent } from './create-account/create-account.component';\nimport { LogInComponent } from './log-in/log-in.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n\n@NgModule({\n  declarations: [\n    ContactsComponent,\n    CreateAccountComponent,\n    LogInComponent,\n\n  ],\n  imports: [\n    ReactiveFormsModule,\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(\n      [\n        {\n          path: '', component:ContactsComponent\n        }\n      ]\n    )\n  ]\n})\nexport class ContactsModule {\n  \n }\n"],"sourceRoot":"webpack:///"}